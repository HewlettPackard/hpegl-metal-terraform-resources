name: Acceptance tests

on:
  pull_request:
  push:
    branches:
      - 'master'

jobs:
  deploy_simportal:
    needs: ecr_login
    runs-on: ubuntu-latest
    services:
      simulator:
        image: 657273346644.dkr.ecr.us-east-1.amazonaws.com/hpe-hcss/quake:master-simulator
        credentials:
          username: AWS
          password: ${{ needs.ecr_login.outputs.ecr_password }}
        ports:
          - 8204:8204
          - 80:80
          - 3002:3002
        env:
          AUTH0_ID: ${{ secrets.SIM_AUTH0 }}
          PASSWD: ${{ secrets.SIM_PASSWD }}
          EMAIL: ${{ secrets.SIM_USER }}
          PORTAL_URL: localhost
        options: >-
          --health-timeout=30s
          --health-start-period=60s
          --health-cmd="curl -k http://localhost:3002/info/time"
          --name SimPortal
    steps:
      - name: test with curl
        run: |
          sleep 60s
          curl -k http://localhost:3002/info/time
      - name: Copy qctl
        run: |
          mkdir -p /tmp/bin
          docker cp SimPortal:/var/local/quake/downloads/qctl/linux/qctl /tmp/bin
          chmod +x /tmp/bin/qctl
          /tmp/bin/qctl -v

      - name: Checkout workspace
        uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7
          terraform_wrapper: false

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.17

      - name: Build and Install plugin
        run: make install

      - name: Run tests
        run: |
          PASSWD=${{ secrets.SIM_PASSWD }}
          EMAIL=${{ secrets.SIM_USER }}
          /tmp/bin/qctl login --portal http://localhost:3002 -u ${EMAIL} -p ${PASSWD} -m 'TestTeam1' -r 'project_owner'
          export HPEGL_METAL_GL_TOKEN=false
          make acceptance

  ecr_login:
    runs-on: ubuntu-latest
    outputs:
      ecr_password: ${{ steps.retrieve_password.outputs.ecr_password }}
    steps:
      - name: Set up AWS CLI
        uses: chrislennon/action-aws-cli@1.1
      - id: retrieve_password
        name: Retrieve ECR password and store as secret
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: echo "::set-output name=ecr_password::$(aws ecr get-login-password)"
